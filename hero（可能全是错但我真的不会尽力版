struct Data
{
    string name;
    int stones;
    int money;
};

// Node对象，包含了Data和下一个指针
class Node
{
    private:
        Data data;
        Node *next;
    
    public:
        Node(const Data &data):data(data),next(NULL){};    
        friend class Hero;
        friend void moneyplus(Node& obj,int newValue);    
};

// Hero对象，抽象整个链表类。
class Hero
{
    private:
        Node *head;
        int num;
    public:
        //1. 构建链表
        Hero(int n,const Data *datas):head(NULL),num(0){
            num=n;
            for(size_t i=0;i<n;i++){
                Node *temp=new Node(datas[i]);
                temp->next=head;
                head=temp;
            }
        }

        //2. 输出链表
        void showList(){
            cout<<"此账号拥有的角色以及所消耗的原石为："<<endl;
            cout<<"----------------------"<<endl;
            for(Node *p=head;p!=NULL;p=p->next){
                cout<<p->data.name<<" --> "<<p->data.stones<<endl;
                cout<<"   "<<"|"<<endl;
                cout<<"   "<<"|"<<endl;
            }
            cout<<"  "<<"NULL"<<endl;
            cout<<"----------------------"<<endl;
            cout<<endl;
        }

        //3. 清空链表
        void freeList(){
            cout<<"链表已经全部清空。"<<endl;
            while(head!=NULL){
                Node *temp=head;
                head=head->next;
                delete temp;
            }
            cout<<endl;
        }

        //4. 增添结点
        void append(const Data &data){
            Node *_new=new Node(data);
            num++;
            _new->next=head;
            head=_new;
        }

        //5. 查询是否有某个角色
        bool find(const string & name){
            for(Node *temp=head;temp!=NULL;temp=temp->next){
                if(temp->data.name==name){
                    cout<<"您已经拥有角色："<<name<<"，抽取此角色消耗原石 "<<temp->data.stones<<endl;
                    return true;
                }
            }
            cout<<"您还未拥有此角色"<<endl;
            return false;
        }

        //6. 输出五星角色的个数
        int heronums()const{
            cout<<"您拥有五星角色的个数为："<<num<<endl;
            return num;
        }

        //7.插入新抽到的五星角色
        Node *Append(const string &name)		
        {
	    Node *p = new Node(name);				
	    if(head==NULL)
		    head = p;
	    else
	    {
		    for(cur_node=head; cur_node->next!=NULL; cur_node=cur_node->next)
			;
		    cur_node->next = p;
	    }
	    num++;
	    return cur_node = p;
        }

        //8.查询氪金
        ostream & operator<<(ostream &out, const Hero &p)		
        {
	        cout<<"money:"<<p.money<<endl;
	        return out;
        }

 
};

void moneyplus(Node& obj,int newvalue)
{
    obj.money=newvalue;
    cout<<"moneyplus:"<<obj.money<<endl;
}
